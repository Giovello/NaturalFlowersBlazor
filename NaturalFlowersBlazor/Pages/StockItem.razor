@page "/stock/{id:int}"

@using NaturalFlowers.Models;
@using NaturalFlowers.ViewModels;
@using NaturalFlowersBlazor.Services;
@using Blazorise;

@inject StockService svc;
@inject NavigationManager nav;
@inject ReviewService reviewSvc;
@inject OrderService orderSvc;
@inject StripeService stripeSvc;
@inject AuthenticationStateProvider GetAuthenticationStateAsync;
@inject INotificationService notifSvc;
@inject IUserService userSvc;
@inject NavigationManager navManager;

<PageTitle>Stock</PageTitle>

<div style="display: flex; align-content: center; width:100%; height:100vh; background-color:#97BB8E; ">
    
    @if (item != null)
    {
        <div style="margin-left: auto; margin-right: auto; margin-top: 100px; border-radius: 10px; width: 50vw; background-color:#97BB8E;">
           
            <div style="display: flex; flex-direction: row; margin-left: auto; margin-right: auto; cursor:pointer; justify-content: center;">
                <img style="border: 1px solid black; border-radius: 150px; width:230px; height: 230px;" src="https://images.rawpixel.com/image_png_1000/cHJpdmF0ZS9sci9pbWFnZXMvd2Vic2l0ZS8yMDIzLTAzL3JtNjIzLXotZWxlbWVudGdyb3VwMS0wMDEtdGV4dC10cC0wMy5wbmc.png">
                <Div Style="display:flex; flex-direction: column; margin-left: 20px; padding: 10px;">
                    <span style="font-size:50px; margin-bottom: 5px;">@item.FriendlyName</span>
                    <div style="display:flex; flex-direction: row;">
                        @for (int i = 0; i < item.Score; i++)
                        {
                            <img style="height: 30px; width: 30px; margin-left: 5px;" src="https://cdn.imgbin.com/12/9/16/imgbin-gold-star-eighty-one-army-pentagram-element-gold-star-illustration-NwnEBDs3GAhY94KXhS7dFZNaA.jpg" />
                        }
                    </div>
                    <Div id="payDetails" Style="display: flex; flex-direction: row; margin-top: 10px;">
                        <Span Style="font-size: 20px; margin-right: 10px;">Quantity: </Span>
                        <Select TValue="int" @bind-SelectedValue="@selectedQuantity">
                            @foreach(var quantity in item.Quantities)
                            {
                                <SelectItem Value="quantity">@quantity</SelectItem>
                            }
                        </Select>
                    </Div>
                    <Div Style="display: flex; flex-direction: row; margin-top: 10px;">
                        <Span Style="font-size: 20px;"><b>$@item.Price (1)</b></Span>
                        <AuthorizeView>
                            <Authorized>
                                <Tooltip Text="Add item to cart"><Button Clicked="() => AddItemToBundle(item)"  Size="Size.Small" Style="margin-left: 10px; cursor:pointer;" Color="Color.Warning"><Icon Name="IconName.PlusSquare" IconStyle="IconStyle.Regular"></Icon></Button></Tooltip>
                            </Authorized>
                        </AuthorizeView>
                    </Div>
                </Div>
                
            </div>
            
            <Divider Style="margin-top:20px;"/>
            <p style="font-size: 18px;">@item.Description</p>
            <Divider Style="margin-top:20px;" />
            
            <h3>See what others thought: </h3>

            <AuthorizeView>
                <Authorized>
                    <Field Style="display: flex; flex-direction:row;">
                        <FieldLabel>Rating: </FieldLabel>
                        <NumericEdit Style="max-width:40px; margin-left: 5px;" Size="Size.ExtraSmall" TValue="int" @bind-Value="@reviewScore" Min="1" Max="4"></NumericEdit>
                    </Field>
                    <TextEdit Placeholder="Let us know what you thought of this product!" @bind-Text="@reviewText" />
                    <Button Style="margin-top:10px; margin-bottom: 20px;" Color="Color.Info" Clicked="PostReview">Post Review</Button>
                </Authorized>
                <NotAuthorized>

                </NotAuthorized>
            </AuthorizeView>

            <Div Style="max-height: 300px; overflow-y: scroll; background-color:#97BB8E; padding: 20px;">
                @foreach (var review in item.Reviews)
                {
                    <Div Style="border:1px solid lightgrey; width: 100%; height: 100px; margin-top: 20px; padding: 10px; border-radius: 10px">
                        <div style="display:flex; flex-direction: row;">
                            @for (int i = 0; i < review.Rating; i++)
                            {
                                <img style="height: 30px; width: 30px; margin-left: 5px;" src="https://cdn.imgbin.com/12/9/16/imgbin-gold-star-eighty-one-army-pentagram-element-gold-star-illustration-NwnEBDs3GAhY94KXhS7dFZNaA.jpg" />
                            }
                        </div>
                        <Span Style="margin-top:20px; margin:6px; font-size:20px">@review.Comment</Span>
                    </Div>
                }
            </Div>
        </div>
        
    }
    <AuthorizeView>
        <Authorized>
            <Div Style="position: fixed; bottom: 10px; right: 10px;"><Icon Clicked="ShowOffcanvas" Style="cursor: pointer;" IconSize="IconSize.x3" Name="IconName.ShoppingCart" IconStyle="IconStyle.Solid"></Icon></Div>
        </Authorized>
    </AuthorizeView>
</div>

<Offcanvas @ref="offcanvasRef" ShowBackdrop Placement="Placement.End">
    <OffcanvasHeader>
        <CloseButton Clicked="@HideOffcanvas" />
    </OffcanvasHeader>
    <OffcanvasBody>
        @if (this.bundle != null)
        {
            <div class="cart-container">
                <h4>Your Shopping Cart</h4>
                <ul class="cart-items">
                    @foreach (var item in this.bundle.BundleItems)
                    {
                        <li class="cart-item">
                            <div class="cart-item-details">
                                <img src="https://images.rawpixel.com/image_png_1000/cHJpdmF0ZS9sci9pbWFnZXMvd2Vic2l0ZS8yMDIzLTAzL3JtNjIzLXotZWxlbWVudGdyb3VwMS0wMDEtdGV4dC10cC0wMy5wbmc.png" alt="@item.Item.FriendlyName" />
                                <div class="item-info">
                                    <span class="product-name">@item.Item.FriendlyName</span>
                                    <span class="product-price">$@item.Item.Price</span>
                                </div>
                            </div>
                            <div class="item-quantity">
                                <button @onclick="() => RemoveItemToBundle(item.Item)">-</button>
                                <span>@item.Amount</span>
                                <button @onclick="() => AddItemToBundle(item.Item)">+</button>
                            </div>
                        </li>
                    }
                </ul>
                <div class="cart-summary">
                    <span class="total-label">Total:</span>
                    <span class="total-price">$@CalculateTotalPrice()</span>
                </div>
                <button @onclick="() => ProceedToCheckout(this.bundle)" class="checkout-button">Checkout</button>
            </div>
        }
    </OffcanvasBody>
</Offcanvas>

@code {
    [Parameter]
    public int id { get; set; }

    private Offcanvas offcanvasRef;

    public ItemViewModel item = new ItemViewModel();

    private Virtualize<ReviewViewModel> virtualizer { get; set; }

    public int selectedQuantity { get; set; } = 1; // Selected Item quantity in select component

    public string reviewText { get; set; } // Text of review to be posted
    public int reviewScore { get; set; } // Score of review to be posted

    BundleViewModel bundle { get; set; }

    protected async override void OnParametersSet()
    {
        item = await this.svc.GetSingleItemAsync(id);

        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //await this.GetItems();
    }

    public async Task PostReview()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authstate.User.Claims.First().Value;

        ReviewViewModel reviewViewModel = new ReviewViewModel();

        reviewViewModel.UserId = userId;
        reviewViewModel.Comment = reviewText;
        reviewViewModel.ItemId = item.Id;

        if (reviewScore == 0)
            reviewScore = 1;

        reviewViewModel.Rating = reviewScore;

        await this.reviewSvc.PostReviewAsync(reviewViewModel);

        item = await this.svc.GetSingleItemAsync(id);

        reviewText = "";
        reviewScore = 1;

        this.StateHasChanged();
    }

    private async void AddItemToBundle(ItemViewModel item)
    {
        if (selectedQuantity == 0 || selectedQuantity == null)
        {
            await this.notifSvc.Error("You must select a quantity to add to your cart! ");
        } else
        {
            this.bundle = await orderSvc.AddItemToOrderBundle(item, selectedQuantity);

            this.StateHasChanged();
        }
    }

    private async void RemoveItemToBundle(ItemViewModel item)
    {
        if (selectedQuantity == 0)
        {
            await this.notifSvc.Error("Nothing left to remove! ");
        }
        else
        {
            this.bundle = await orderSvc.RemoveItemFromOrderBundle(item);

            this.StateHasChanged();
        }
    }

    private decimal? CalculateTotalPrice()
    {
        decimal? totalPrice = 0;

        foreach (BundleItemViewModel bund in this.bundle.BundleItems)
        {
            totalPrice += (bund.Amount * bund.Item.Price);
        }

        return totalPrice;
    }

    private async void ProceedToCheckout(BundleViewModel bundle)
    {
        var userId = await this.userSvc.GetUserIdAsync();

        var stripeUrl = await stripeSvc.CreateCheckout(bundle, userId);

        navManager.NavigateTo(stripeUrl, true);
    }

    private async Task ShowOffcanvas()
    {
        this.bundle = await orderSvc.GetOrderBundle();

        this.StateHasChanged();

        await this.offcanvasRef.Show();
    }

    private async Task HideOffcanvas()
    {
        await this.offcanvasRef.Hide();
    }
}
